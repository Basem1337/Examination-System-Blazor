@page "/instCourses/create"
@using ExaminationSystem.Models
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Instructor")]

<h3>Create Course</h3>

<EditForm Model="Course" OnValidSubmit="AddCourse">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name:</label>
        <InputText @bind-Value="Course.Name" class="form-control" />
        <ValidationMessage For="() => Course.Name" />
    </div>

    <div class="mb-3">
        <label>Description:</label>
        <InputTextArea @bind-Value="Course.Description" class="form-control" />
        <ValidationMessage For="() => Course.Description" />
    </div>

    @* <div class="mb-3">
        <label>Exam:</label>
        <InputSelect @bind-Value="Course.ExamId" class="form-control">
            <option value="">-- Select Exam --</option>
            @foreach (var exam in Exams)
            {
                <option value="@exam.Id">@exam.Title</option>
            }
        </InputSelect>
        <ValidationMessage For="() => Course.ExamId" />
    </div> *@

    <div class="mb-3">
        <label>Instructor:</label>
        <InputSelect @bind-Value="Course.InstructorId" class="form-control">
            <option value="">-- Select Instructor --</option>
            @foreach (var instructor in Instructors)
            {
                <option value="@instructor.Id">@instructor.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => Course.InstructorId" />
    </div>

    <button class="btn text-white" Style="@($"background:#ec008c;")" type="submit">Create</button>

    <span>
        <a class="btn btn-outline-danger" href="/instCourses">Cancel</a>
    </span>
</EditForm>

@code {
    private Course Course = new();

    private List<Exam> Exams = new();
    private List<Instructor> Instructors = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Exams = await context.Exams.ToListAsync();
        Instructors = await context.Instructors.ToListAsync();
    }

    private async Task AddCourse()
    {
        using var context = DbFactory.CreateDbContext();
        context.Courses.Add(Course);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/instCourses");
    }
}
